//@version=6
indicator("Williams Fractals with Buy/Sell Signals", shorttitle="Fractals Signals", overlay=true)

// Define "n" as the number of periods and keep a minimum value of 2 for error handling
n = input.int(title="Periods", defval=2, minval=2)

// Up Fractal
bool upflagDownFrontier = true
bool upflagUpFrontier0 = true
bool upflagUpFrontier1 = true
bool upflagUpFrontier2 = true
bool upflagUpFrontier3 = true
bool upflagUpFrontier4 = true

for i = 1 to n
    upflagDownFrontier := upflagDownFrontier and (high[n-i] < high[n])
    upflagUpFrontier0 := upflagUpFrontier0 and (high[n+i] < high[n])
    upflagUpFrontier1 := upflagUpFrontier1 and (high[n+1] <= high[n] and high[n+i + 1] < high[n])
    upflagUpFrontier2 := upflagUpFrontier2 and (high[n+1] <= high[n] and high[n+2] <= high[n] and high[n+i + 2] < high[n])
    upflagUpFrontier3 := upflagUpFrontier3 and (high[n+1] <= high[n] and high[n+2] <= high[n] and high[n+3] <= high[n] and high[n+i + 3] < high[n])
    upflagUpFrontier4 := upflagUpFrontier4 and (high[n+1] <= high[n] and high[n+2] <= high[n] and high[n+3] <= high[n] and high[n+4] <= high[n] and high[n+i + 4] < high[n])
flagUpFrontier = upflagUpFrontier0 or upflagUpFrontier1 or upflagUpFrontier2 or upflagUpFrontier3 or upflagUpFrontier4

upFractal = upflagDownFrontier and flagUpFrontier

// Down Fractal
bool downflagDownFrontier = true
bool downflagUpFrontier0 = true
bool downflagUpFrontier1 = true
bool downflagUpFrontier2 = true
bool downflagUpFrontier3 = true
bool downflagUpFrontier4 = true

for i = 1 to n
    downflagDownFrontier := downflagDownFrontier and (low[n-i] > low[n])
    downflagUpFrontier0 := downflagUpFrontier0 and (low[n+i] > low[n])
    downflagUpFrontier1 := downflagUpFrontier1 and (low[n+1] >= low[n] and low[n+i + 1] > low[n])
    downflagUpFrontier2 := downflagUpFrontier2 and (low[n+1] >= low[n] and low[n+2] >= low[n] and low[n+i + 2] > low[n])
    downflagUpFrontier3 := downflagUpFrontier3 and (low[n+1] >= low[n] and low[n+2] >= low[n] and low[n+3] >= low[n] and low[n+i + 3] > low[n])
    downflagUpFrontier4 := downflagUpFrontier4 and (low[n+1] >= low[n] and low[n+2] >= low[n] and low[n+3] >= low[n] and low[n+4] >= low[n] and low[n+i + 4] > low[n])
flagDownFrontier = downflagUpFrontier0 or downflagUpFrontier1 or downflagUpFrontier2 or downflagUpFrontier3 or downflagUpFrontier4

downFractal = downflagDownFrontier and flagDownFrontier

// Store the last up and down fractal values
var float lastUpFractal = na
var float lastDownFractal = na
var bool waitingForNextUpFractal = false
var bool waitingForNextDownFractal = false

// Update last up fractal and reset buy signal flag
if upFractal
    lastUpFractal := high[n]
    waitingForNextUpFractal := false

// Update last down fractal and reset sell signal flag
if downFractal
    lastDownFractal := low[n]
    waitingForNextDownFractal := false

// Buy signal when price is above the last up fractal, only once between fractals
buySignal = close > lastUpFractal and not na(lastUpFractal) and not waitingForNextUpFractal
if buySignal
    waitingForNextUpFractal := true

// Sell signal when price is below the last down fractal, only once between fractals
sellSignal = close < lastDownFractal and not na(lastDownFractal) and not waitingForNextDownFractal
if sellSignal
    waitingForNextDownFractal := true

// Plot only buy and sell signals (fractal signals hidden)
plotshape(buySignal, style=shape.triangleup, location=location.belowbar, color=color.green, size=size.small, title="Buy Signal")
plotshape(sellSignal, style=shape.triangledown, location=location.abovebar, color=color.red, size=size.small, title="Sell Signal")

// Alert conditions for signals
alertcondition(buySignal, title="Buy Signal Alert", message="Price is above last Up Fractal")
alertcondition(sellSignal, title="Sell Signal Alert", message="Price is below last Down Fractal")